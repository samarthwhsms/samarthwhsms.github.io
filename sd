import React, { useState, useEffect } from 'react';
import { Camera, Users, LogIn, LogOut, Activity, Wifi, WifiOff, Scan, User } from 'lucide-react';

const GymTrackerApp = () => {
  const [currentCount, setCurrentCount] = useState(0);
  const [isConnected, setIsConnected] = useState(false);
  const [activityLog, setActivityLog] = useState([]);
  const [manualId, setManualId] = useState('');
  const [selectedAction, setSelectedAction] = useState('entry');
  const [notification, setNotification] = useState(null);
  const [isScanning, setIsScanning] = useState(false);

  // Firebase connection simulation
  useEffect(() => {
    // Simulate Firebase connection
    const connectTimer = setTimeout(() => {
      setIsConnected(true);
      showNotification('Connected to Firebase', 'success');
    }, 2000);

    // Simulate random gym activity
    const activityTimer = setInterval(() => {
      if (Math.random() < 0.2) {
        const action = Math.random() < 0.6 ? 'entry' : 'exit';
        const memberId = 'AUTO-' + Math.floor(Math.random() * 1000);
        processEntry(memberId, action, true);
      }
    }, 8000);

    return () => {
      clearTimeout(connectTimer);
      clearInterval(activityTimer);
    };
  }, []);

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  const processEntry = (memberId, action, isAutomatic = false) => {
    const timestamp = new Date();
    const logEntry = {
      id: Date.now(),
      memberId,
      action,
      timestamp: timestamp.toLocaleTimeString(),
      date: timestamp.toLocaleDateString()
    };

    if (action === 'entry') {
      setCurrentCount(prev => prev + 1);
      showNotification(`âœ… ${memberId} entered`, 'success');
    } else {
      setCurrentCount(prev => Math.max(0, prev - 1));
      showNotification(`ðŸšª ${memberId} exited`, 'success');
    }

    setActivityLog(prev => [logEntry, ...prev.slice(0, 9)]);
    
    if (!isAutomatic) {
      setManualId('');
    }
  };

  const simulateQRScan = (action) => {
    setIsScanning(true);
    showNotification('ðŸ“± Scanning QR Code...', 'info');
    
    setTimeout(() => {
      const memberId = 'QR-' + Math.floor(Math.random() * 10000).toString().padStart(4, '0');
      setIsScanning(false);
      processEntry(memberId, action);
    }, 2000);
  };

  const handleManualEntry = () => {
    if (!manualId.trim()) {
      showNotification('Please enter Member ID', 'error');
      return;
    }
    processEntry(manualId.trim(), selectedAction);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 text-white">
      {/* Status Bar */}
      <div className="bg-black bg-opacity-20 p-2 flex justify-between items-center text-sm">
        <div className="flex items-center space-x-2">
          <div className="w-4 h-2 bg-white rounded-full"></div>
          <div className="w-4 h-2 bg-white rounded-full"></div>
          <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
        </div>
        <div className="font-mono">12:34</div>
        <div className="flex space-x-1">
          {isConnected ? <Wifi size={16} /> : <WifiOff size={16} />}
          <div className="w-6 h-3 border border-white rounded-sm">
            <div className="w-4 h-full bg-green-400 rounded-sm"></div>
          </div>
        </div>
      </div>

      {/* App Header */}
      <div className="bg-gradient-to-r from-purple-800 to-indigo-800 p-6 shadow-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
              <Activity className="text-white" size={24} />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Gym Tracker</h1>
              <p className="text-purple-200 text-sm">Real-time member tracking</p>
            </div>
          </div>
          <div className="text-right">
            <div className="flex items-center space-x-2">
              {isConnected ? (
                <>
                  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                  <span className="text-green-300 text-sm">Online</span>
                </>
              ) : (
                <>
                  <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                  <span className="text-red-300 text-sm">Offline</span>
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Current Count Display */}
      <div className="p-6">
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 text-center shadow-xl border border-white border-opacity-20">
          <Users className="mx-auto mb-4 text-green-400" size={48} />
          <div className="text-6xl font-bold text-green-400 mb-2">{currentCount}</div>
          <div className="text-lg text-purple-200 mb-4">People Currently Inside</div>
          <div className="flex items-center justify-center space-x-2 text-green-300">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span className="text-sm">Live Updates</span>
          </div>
        </div>
      </div>

      {/* QR Scanner Section */}
      <div className="px-6 mb-6">
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-2xl p-6 border border-white border-opacity-20">
          <div className="flex items-center space-x-2 mb-4">
            <Scan className="text-blue-300" size={24} />
            <h2 className="text-xl font-semibold">QR Scanner</h2>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-6">
            <button
              onClick={() => simulateQRScan('entry')}
              disabled={isScanning}
              className={`bg-green-500 hover:bg-green-600 disabled:bg-gray-500 p-4 rounded-xl flex flex-col items-center space-y-2 transition-all transform hover:scale-105 ${isScanning ? 'opacity-50' : ''}`}
            >
              <LogIn size={24} />
              <span className="font-semibold">Scan Entry</span>
            </button>
            
            <button
              onClick={() => simulateQRScan('exit')}
              disabled={isScanning}
              className={`bg-red-500 hover:bg-red-600 disabled:bg-gray-500 p-4 rounded-xl flex flex-col items-center space-y-2 transition-all transform hover:scale-105 ${isScanning ? 'opacity-50' : ''}`}
            >
              <LogOut size={24} />
              <span className="font-semibold">Scan Exit</span>
            </button>
          </div>

          {isScanning && (
            <div className="bg-blue-500 bg-opacity-30 p-4 rounded-xl text-center mb-4">
              <Camera className="mx-auto mb-2 animate-pulse" size={32} />
              <p className="font-semibold">Scanning QR Code...</p>
              <div className="mt-2 h-2 bg-gray-300 rounded-full overflow-hidden">
                <div className="h-full bg-blue-400 animate-pulse"></div>
              </div>
            </div>
          )}

          {/* Manual Entry */}
          <div className="border-t border-white border-opacity-20 pt-4">
            <div className="flex items-center space-x-2 mb-3">
              <User className="text-blue-300" size={20} />
              <h3 className="font-semibold">Manual Entry</h3>
            </div>
            
            <div className="space-y-3">
              <input
                type="text"
                value={manualId}
                onChange={(e) => setManualId(e.target.value)}
                placeholder="Enter Member ID"
                className="w-full bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl p-3 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400"
                onKeyPress={(e) => e.key === 'Enter' && handleManualEntry()}
              />
              
              <div className="flex space-x-3">
                <select
                  value={selectedAction}
                  onChange={(e) => setSelectedAction(e.target.value)}
                  className="flex-1 bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl p-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                  <option value="entry" className="text-black">Entry</option>
                  <option value="exit" className="text-black">Exit</option>
                </select>
                
                <button
                  onClick={handleManualEntry}
                  className="bg-blue-500 hover:bg-blue-600 px-6 py-3 rounded-xl font-semibold transition-colors"
                >
                  Submit
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Activity Log */}
      <div className="px-6 pb-6">
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-2xl p-6 border border-white border-opacity-20">
          <div className="flex items-center space-x-2 mb-4">
            <Activity className="text-yellow-300" size={24} />
            <h2 className="text-xl font-semibold">Recent Activity</h2>
          </div>
          
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {activityLog.length === 0 ? (
              <p className="text-center text-gray-300 py-4">No recent activity</p>
            ) : (
              activityLog.map((entry) => (
                <div
                  key={entry.id}
                  className={`flex items-center justify-between p-3 rounded-xl ${
                    entry.action === 'entry' 
                      ? 'bg-green-500 bg-opacity-20 border-l-4 border-green-400' 
                      : 'bg-red-500 bg-opacity-20 border-l-4 border-red-400'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    {entry.action === 'entry' ? 
                      <LogIn className="text-green-400" size={20} /> : 
                      <LogOut className="text-red-400" size={20} />
                    }
                    <div>
                      <p className="font-semibold">{entry.memberId}</p>
                      <p className="text-sm text-gray-300">
                        {entry.action === 'entry' ? 'Entered' : 'Exited'} the gym
                      </p>
                    </div>
                  </div>
                  <div className="text-right text-sm text-gray-300">
                    <p>{entry.timestamp}</p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* Notification */}
      {notification && (
        <div className={`fixed top-20 left-4 right-4 p-4 rounded-xl shadow-lg z-50 ${
          notification.type === 'success' ? 'bg-green-500' :
          notification.type === 'error' ? 'bg-red-500' : 'bg-blue-500'
        } animate-pulse`}>
          <p className="text-center font-semibold text-white">{notification.message}</p>
        </div>
      )}
    </div>
  );
};

export default GymTrackerApp;
